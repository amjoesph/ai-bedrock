import gradio as gr  # UI library to create simple web interfaces for ML models or functions
import os

# LangChain Core
from langchain_core.prompts import PromptTemplate  # For structured prompt creation
from langchain_core.runnables import RunnableSequence  # For composing chains with `|` operator

# LangChain AWS extension for Bedrock support
from langchain_aws import BedrockLLM

# Set AWS profile to use from local credentials (~/.aws/credentials)
os.environ["AWS_PROFILE"] = "bedrock"

# Specify the Bedrock model ID to use (Claude v2 in this case)
modelID = "anthropic.claude-v2"


def prompt_bot(country, question):
    """
    Gradio handler function that accepts a country and a free-form question,
    builds a prompt, sends it to Amazon Bedrock via LangChain, and returns the response.
    
    Args:
        country (str): The user's selected country.
        question (str): The freeform input question to pass to the LLM.
    
    Returns:
        str: The response generated by the Bedrock-hosted LLM.
    """
    print('countries:', country)

    # Define a prompt with placeholders for the LangChain template engine
    prompt = PromptTemplate(
        input_variables=["country", "question"],
        template="You are a chatbot. You are in {country}.\n\n{question}"
    )

    # Create a Bedrock LLM instance using the model ID
    llm = BedrockLLM(model_id=modelID)

    # Compose the chain using the prompt and the LLM
    bedrock_chain = prompt | llm

    # Invoke the chain with user inputs
    response = bedrock_chain.invoke({"country": country, "question": question})

    return response


# Define a simple Gradio web interface
demo = gr.Interface(
    fn=prompt_bot,  # Function to call when the UI is used
    inputs=[
        gr.Dropdown(
            ["USA", "Mexico", "Canada"],
            label="Countries",
            info="Where are they from?"
        ),
        gr.Textbox(
            label="Question",
            placeholder="What's on your mind?",
            autofocus=True
        ),
    ],
    outputs="text",  # Return value will be shown as plain text
    title="Chat with Bedrock LLM",
    description="Select your country and ask a question to a Bedrock-hosted Claude model"
)

# Launch the Gradio app if this script is run directly
if __name__ == "__main__":
    demo.launch()
